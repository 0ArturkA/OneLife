Messages in ascii.

Terminated by # character



Each message from server is prefaced by a type tag.

Possible types include:

MAP_CHUNK

PLAYER_UPDATE

PLAYER_MOVES_START

MAP_CHANGE



Client can expect to receive these at any time, and in any order.



MAP_CHUNK
size x y
id id id id id id id id ... id#


Where:
Chunk includes a size X size number of ids (a square of the map).
Square is positioned on map grid with upper left corner at x y




PLAYER_UPDATE
p_id o_id x y s
p_id o_id x y s
p_id o_id x y s
p_id o_id x y s
...
p_id o_id x y s
#

List of player ids with their held object ids and x,y grid positions
and floating point s move speeds (in grid square widths per second)

This means the player is stationary at this position.

Deleted players reported in update with
X X 
for x y.






PLAYER_MOVES_START
p_id xs ys xd yd total_sec eta_sec
p_id xs ys xd yd total_sec eta_sec
p_id xs ys xd yd total_sec eta_sec
...
p_id xs ys xd yd total_sec eta_sec
#

List of player ids that just started moving, their start and 
destination x y grid position, how long the total move should take (in case we 
come into the game in the middle of a move), and their time to arrival in 
floating point seconds


A PLAYER_UPDATE will be sent when these players reach their destination.
Until that has happened, client must assume player is still in transit.




MAP_CHANGE
x y new_id
x y new_id
x y new_id
...
x y new_id
#

Grid position of changes, and id that position must change to.




First message sent upon client new connection to server:

List of object IDs and x,y positions.  Client's object is listed last


id x y
id x y
id x y
id x y
#


Example:

0 250 120
1 200 45
4 302 78
#


Deleted objects listed in the format:
id X X

In other words, no x,y coordiantes, but the character X twice instead




Clients send moves in the following format:

MOVE x y#
USE x y#
GRAB x y#
DROP x y#