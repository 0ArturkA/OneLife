Messages in ascii.

Terminated by # character


NOTE:

Wherever an object_id is menioned (o_id, new_id, etc), it can be either
a single ASCII-base-10 integer, OR a comma-delimited list of integers.

The first one is the base object ID (can be 0 if no object there),
and subsequent IDs are the objects contained in that object




Each message from server is prefaced by a type tag.

Possible types include:

MAP_CHUNK  (MC)

PLAYER_UPDATE  (PU)

PLAYER_MOVES_START (PM)

MAP_CHANGE (MX)



Client can expect to receive these at any time, and in any order.



MC
size x y
binary_raw_size binary_compressed_size 
#
COMPRESSED_BINARY_DATA


Where:
Chunk includes a size X size number of ids (a square of the map).
Square is positioned on map grid with upper left corner at x y
binary_size is the number of binary bytes of map data that will follow the #

BINARY_DATA is the raw binary data.  This involves run-length encoding and 
a few other tricks to reduce it's size.  Check the code in map.cpp for details.




PU
p_id po_id o_id o_origin_valid o_origin_x o_origin_y heat force x y age age_r s
p_id po_id o_id o_origin_valid o_origin_x o_origin_y heat force x y age age_r s
p_id po_id o_id o_origin_valid o_origin_x o_origin_y heat force x y age age_r s
p_id po_id o_id o_origin_valid o_origin_x o_origin_y heat force x y age age_r s
...
p_id po_id o_id o_origin_valid o_origin_x o_origin_y heat force x y age age_r s
#

List of player ids with their display object ids, held object ids, 
whether held origin is valid (1 or 0), origin position on map of that held 
object (where it was picked up from), and x,y grid positions of player,
floating point age in "years", floating point aging rate in years/sec, and
floating point s move speeds (in grid square widths per second)

Heat is the player's warmth between 0 and 1, where 0 is coldest, 1 is hottest,
and 0.5 is ideal.

This means the player is stationary at this position.

force is usually 0 except in special cases of move truncation where it is 1.
A player receiving force for itself must snap back to that location
before continuing to move.

Deleted players reported in update with
X X 
for x y.






PM
p_id xs ys total_sec eta_sec trunc xdelt0 ydelt0 ... xdeltN ydeltN
p_id xs ys total_sec eta_sec trunc xdelt0 ydelt0 ... xdeltN ydeltN
...
p_id xs ys total_sec eta_sec trunc xdelt0 ydelt0 ... xdeltN ydeltN
#

List of player ids that just started moving, their start x y grid position,
their delta grid offsets along their path (xs + xdelt0 = first destination x), 
how long the total move should take (in case we 
come into the game in the middle of a move), and their time to arrival in 
floating point seconds

trunc is 0 for untruncated path, or 1 for truncated path.
Truncated paths are shorter than what the player originally requested.
This can happen in immediate response to the move request or later, mid-move,
if the path gets cut off (a new PM will be sent to truncate the path at that
point)

A PLAYER_UPDATE will be sent when these players reach their destination.
Until that has happened, client must assume player is still in transit.




MX
x y new_id p_id
x y new_id p_id
x y new_id p_id
...
x y new_id p_id
#

Grid position of changes, and new object id that position must change to.
p_id is the player that was responsible for the change (in the case of an 
object drop only), or -1 if none.




First message sent upon client new connection to server:

List of object IDs and x,y positions.  Client's object is listed last


id x y
id x y
id x y
id x y
#


Example:

0 250 120
1 200 45
4 302 78
#


Deleted objects listed in the format:
id X X

In other words, no x,y coordiantes, but the character X twice instead




Clients send moves in the following format:

USE x y#
GRAB x y#
DROP x y#


This one is more complicated:
MOVE xs ys xdelt0 ydelt0 xdelt1 ydelt1 ... xdeltN ydeltN#

xs,ys is the absolute world position the player thinks they're currently at

the pairs of deltas represent steps along an obstacle-free path that the player
wants to take to their destination xdeltN,ydeltN

These deltas are relative to xs,ys and will be rejected if they are larger
than +/- 16 (the maximum allowed path search radius.
